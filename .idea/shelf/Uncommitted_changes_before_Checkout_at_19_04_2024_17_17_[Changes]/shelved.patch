Index: static/style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>body {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background: rgb(39, 38, 38);\n    color: #333;\n    height: 100%;\n    overflow: hidden;\n}\n\n\n.scoreboard {\n    justify-content: center;\n    align-items: center;\n    border: 2px solid #ccc;\n    color: white;\n    position: fixed;\n    border-radius: 10px;\n    top: 10px;\n    right: 10px;\n    z-index: 999;\n}\n\n.title-top{\n    color: aliceblue    ;\n    display: flex;\n    justify-content: center;\n    font-family: \"Dancing Script\", cursive;\n    font-optical-sizing: auto;\n    font-weight: 400;\n    font-style: normal;\n}\n\n.myInput,.mybtn{\nborder-radius: 20px;\n}\n\n.myInput{\n   font-size: 1.5   em;\n}\n\n.mybtn{\n    color: white;\n    font-size: 1.5em;\n    background-color:  rgb(21, 124, 220);\n}\n\n.inputContainer{\n    text-align: center;\n    margin: 5px;\n}\n\n.audioContainer{\n    align-content: center;\n    text-align: center;\n    background: linear-gradient(to bottom right,#50ffd3,#6A5ACD);\n    border-radius: 20px;\n     height: 450px;\n     width: 50%; \n}\n\n.myAudio{\n    display: flex;\n    justify-content: center;\n}\n\n.container-block{\ndisplay: flex;\njustify-content: center;\nmargin: 7%;\n}\n\n\n.container {\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 3%;\n  }\n\n.wave {\n    height: 0px;\n    width: 10px;\n    border-radius: 20px;\n    background: white;\n    display: inline-block;\n    margin: 0px 20px;\n    animation: waveloader 2s infinite linear;\n  }\n\n\n\n  .wave:nth-child(1) {\n    animation-delay: 0s;\n  }\n\n  .wave:nth-child(2) {\n    animation-delay: 0.5s;\n  }\n\n  .wave:nth-child(3) {\n    animation-delay: 1.0s;\n  }\n\n  .wave:nth-child(4) {\n    animation-delay: 1.5s;\n  }\n\n  .wave:nth-child(5) {\n    animation-delay: 2s;\n  }\n\n\n  @keyframes waveloader {\n    50% {\n      height: 20%;\n    }\n\n    100% {\n      height: 100%;\n    }\n  }\n\n  .deco-Img{\n    transform: translateX(118%);\n    border: solid 1px black;\n    height: 30%;\n    width: 30%;\n    border-radius: 50%;\n    -moz-box-shadow: 0px 6px 5px black;\n    -webkit-box-shadow: 0px 6px 5px black;\n    box-shadow: 0px 6px 5px black;\n    -moz-border-radius: 190px;\n    -webkit-border-radius: 190px;\n    background: center / cover no-repeat  url(\"../img/Blind-Test-removebg-preview.png\");\n\n  }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/static/style.css b/static/style.css
--- a/static/style.css	
+++ b/static/style.css	
@@ -133,6 +133,6 @@
     box-shadow: 0px 6px 5px black;
     -moz-border-radius: 190px;
     -webkit-border-radius: 190px;
-    background: center / cover no-repeat  url("../img/Blind-Test-removebg-preview.png");
+    background: center / cover no-repeat  url("../static/img/Blind-Test-removebg-preview.png");
 
   }
\ No newline at end of file
Index: serveur.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/zmb3/spotify\"\n\t\"golang.org/x/oauth2/clientcredentials\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n)\n\ntype PageData struct {\n\tTrack *spotify.SimpleTrack\n}\n\nvar currentTrackIndex int\n\nfunc api() []*spotify.SimpleTrack {\n\tauthConfig := &clientcredentials.Config{\n\t\tClientID:     \"42d26f90ce1b486f96349f3f8f9cf94c\",\n\t\tClientSecret: \"23166304a010453a9a31f5c93e625cd3\",\n\t\tTokenURL:     spotify.TokenURL,\n\t}\n\n\taccessToken, err := authConfig.Token(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"error retrieving access token: %v\", err)\n\t}\n\n\tclient := spotify.Authenticator{}.NewClient(accessToken)\n\n\tplaylistID := spotify.ID(\"37i9dQZF1DX9PXZbuB8BjJ\")\n\tplaylist, err := client.GetPlaylist(playlistID)\n\tif err != nil {\n\t\tlog.Fatalf(\"error retrieving playlist data: %v\", err)\n\t}\n\n\tvar tracks []*spotify.SimpleTrack\n\tfor _, playlistTrack := range playlist.Tracks.Tracks {\n\t\ttrack := playlistTrack.Track\n\n\t\tsimpleTrack := &spotify.SimpleTrack{\n\t\t\tID:         track.ID,\n\t\t\tName:       track.Name,\n\t\t\tArtists:    track.Artists,\n\t\t\tPreviewURL: track.PreviewURL,\n\t\t}\n\t\ttracks = append(tracks, simpleTrack)\n\t}\n\treturn tracks\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tinput := r.FormValue(\"value\")\n\t\t\tcurrentTrack := api()[currentTrackIndex]\n\n\t\t\tif input == currentTrack.Name {\n\t\t\t\tcurrentTrackIndex++\n\t\t\t\tif currentTrackIndex >= len(api()) {\n\t\t\t\t\tcurrentTrackIndex = 0\n\t\t\t\t}\n\t\t\t}\n\t\t\tfmt.Println(input)\n\t\t}\n\n\t\ttpl := template.Must(template.ParseFiles(\"index.html\"))\n\n\t\ttrack := api()[currentTrackIndex]\n\t\tdata := PageData{Track: track}\n\n\t\tif err := tpl.Execute(w, data); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t})\n\tfs := http.FileServer(http.Dir(\"./static/\"))\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", fs))\n\tlog.Println(\"Server started on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n
===================================================================
diff --git a/serveur.go b/serveur.go
--- a/serveur.go	
+++ b/serveur.go	
@@ -2,16 +2,18 @@
 
 import (
 	"context"
-	"fmt"
-	"github.com/zmb3/spotify"
-	"golang.org/x/oauth2/clientcredentials"
+
 	"html/template"
 	"log"
 	"net/http"
+
+	"github.com/zmb3/spotify"
+	"golang.org/x/oauth2/clientcredentials"
 )
 
 type PageData struct {
-	Track *spotify.SimpleTrack
+	Track    *spotify.SimpleTrack
+	NextName string
 }
 
 var currentTrackIndex int
@@ -51,6 +53,14 @@
 	return tracks
 }
 
+func getNextTrack() *spotify.SimpleTrack {
+	currentTrackIndex++
+	if currentTrackIndex >= len(api()) {
+		currentTrackIndex = 0
+	}
+	return api()[currentTrackIndex]
+}
+
 func main() {
 	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
 		if r.Method == "POST" {
@@ -63,7 +73,10 @@
 					currentTrackIndex = 0
 				}
 			}
-			fmt.Println(input)
+
+			if currentTrack.PreviewURL == "" {
+				currentTrack = getNextTrack()
+			}
 		}
 
 		tpl := template.Must(template.ParseFiles("index.html"))
@@ -71,6 +84,13 @@
 		track := api()[currentTrackIndex]
 		data := PageData{Track: track}
 
+		nextTrack := getNextTrack()
+		nextName := ""
+		if nextTrack != nil {
+			nextName = nextTrack.Name
+		}
+		data.NextName = nextName
+
 		if err := tpl.Execute(w, data); err != nil {
 			http.Error(w, err.Error(), http.StatusInternalServerError)
 			return
